%%%%% valgrind: http://valgrind.org/docs/manual/cl-manual.html#cl-manual.use

valgrind --tool=callgrind [callgrind options] your-program [program options]
callgrind_annotate [options below] callgrind.out.<pid>

--inclusive=yes: Instead of using exclusive cost of functions as sorting order, use and show inclusive cost.

--tree=both: Interleave into the top level list of functions, information on the callers and the callees of each function. In these lines, which represents executed calls, the cost gives the number of events spent in the call. Indented, above each function, there is the list of callers, and below, the list of callees. The sum of events in calls to a given function (caller lines), as well as the sum of events in calls from the function (callee lines) together with the self cost, gives the total inclusive cost of the function.

run kcachegrind

%%%%% gprof: http://www.cs.utah.edu/dept/old/texinfo/as/gprof.html

link with '-pg': cc -g -c myprog.c utils.c -pg

execute program as normally would => generates gmon.out

gprof options [executable-file [profile-data-files...]] [> outfile]
(ex. default) gprof myexecutable gmon.out > analysis.txt

%%%%% google gperftools: https://code.google.com/p/gperftools/wiki/GooglePerformanceTools

link with '-lprofiler': cc -g -c myprog.c utils.c -lprofilers


